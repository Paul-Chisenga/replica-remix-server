// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MenuCategory {
  BEVERAGE
  BAKERY
  BREAKFAST
  FOOD
}

enum AdminPriviledge {
  CRU_ADMIN
  CRU_MENU
  CREATE_PRODUCT
  UPDATE_PRODUCT
  DELETE_PRODUCT
}

enum Role {
  ADMIN
  CUSTOMER
  RIDER
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ext       String
  name      String
  key       String
  size      Int
  updatedAt DateTime @default(now())
  createdAt DateTime @updatedAt
}

model MenuItem {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  category  MenuCategory
  products  Product[]
  meta      Json?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([title, category])
}

type ShippingAddress {
  lat       Float
  lng       Float
  name      String
  extraInfo String?
}

type ProductChoice {
  required        Boolean
  selector        String
  options         String[]
  requiredOptions Int
}

model Product {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  price       Float
  choices     ProductChoice[]
  meta        Json
  image       String?
  sold_out    Boolean?        @default(false)
  reviews     ProductReview[]
  cartItem    CartItem[]
  menuItem    MenuItem        @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId  String          @db.ObjectId
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@unique([title, menuItemId])
}

model ProductReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  name      String
  rating    Int
  email     String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  picture   String?
  firstname String
  lastname  String
  email     String    @unique
  phone     Int
  role      Role
  password  String
  active    Boolean   @default(true)
  admin     Admin?
  customer  Customer?
  rider     Rider?
  meta      Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Admin {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  profile     Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String            @unique @db.ObjectId
  priviledges AdminPriviledge[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

type SelectedChoiceOption {
  id    String
  label String
  count Int
}

type SelectedChoice {
  id       String
  selector String
  options  SelectedChoiceOption[]
}

model CartItem {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  product    Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String           @db.ObjectId
  count      Int
  choices    SelectedChoice[]
  meta       Json?
  customer   Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String           @db.ObjectId
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([productId, customerId])
}

type OrderItemProduct {
  id           String
  name         String
  description  String?
  price        Float
  choices      SelectedChoice[]
  imageUrl     String?
  meta         Json?
  menuCategory MenuCategory
  menuItem     String
}

type OrderItem {
  product OrderItemProduct
  count   Int
}

enum OrderStatus {
  recieved
  preparing
  shipping
  delivered
}

model Order {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNo          Int
  items            OrderItem[]
  customer         Customer    @relation(fields: [customerId], references: [id])
  customerId       String      @db.ObjectId
  rider            Rider?      @relation(fields: [riderId], references: [id])
  riderId          String?     @db.ObjectId
  meta             Json?
  status           OrderStatus @default(recieved)
  verificationCode String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Customer {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  profile         Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId       String           @unique @db.ObjectId
  cart            CartItem[]
  order           Order[]
  shippingAddress ShippingAddress?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Rider {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  profile   Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String           @unique @db.ObjectId
  location  ShippingAddress?
  order     Order[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Reservation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     Int
  people    Int
  email     String?
  time      String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
