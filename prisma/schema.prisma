// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MenuCategory {
  BEVARAGE
  BAKERY
  BREAKFAST
  FOOD
}

enum AdminPriviledge {
  CRU_ADMIN
  CRU_MENU
  CREATE_PRODUCT
  UPDATE_PRODUCT
  DELETE_PRODUCT
}

enum Role {
  ADMIN
  CUSTOMER
}

model Picture {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ext       String
  name      String
  key       String
  size      Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
  updatedAt DateTime @default(now())
  createdAt DateTime @updatedAt
}

model SubMenu {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  products  Product[]
  menu      Menu      @relation(fields: [menuId], references: [id])
  menuId    String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Menu {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  category  MenuCategory
  title     String
  subtitle  String?
  submenu   SubMenu[]
  createdBy Admin        @relation(fields: [adminId], references: [id])
  adminId   String       @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([title, category, subtitle])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String      @unique
  subtitle    String?
  description String?
  prices      Float[]
  subMenu     SubMenu     @relation(fields: [subMenuId], references: [id])
  subMenuId   String      @db.ObjectId
  createdBy   Admin       @relation(fields: [adminId], references: [id])
  adminId     String      @db.ObjectId
  pictures    Picture[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItem    CartItem[]
  orderItem   OrderItem[]
}

model Profile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname  String
  email     String    @unique
  phone     Int
  role      Role
  password  String
  active    Boolean   @default(true)
  admin     Admin?
  customer  Customer?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Admin {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  profile     Profile           @relation(fields: [profileId], references: [id])
  profileId   String            @unique @db.ObjectId
  priviledges AdminPriviledge[]
  menu        Menu[]
  product     Product[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model CartItem {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  product    Product   @relation(fields: [productId], references: [id])
  productId  String    @db.ObjectId
  count      Int
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  count     Int
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNo    Int
  items      OrderItem[]
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String      @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Customer {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  profile   Profile    @relation(fields: [profileId], references: [id])
  profileId String     @unique @db.ObjectId
  cart      CartItem[]
  orders    Order[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
